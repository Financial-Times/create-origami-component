const nixt = require('nixt');

describe('Init', () => {
	it('Uses default values where possible to create folder tree', done => {
    nixt({ colors: false })
      .run('./bin/run init')
      .on(/What are you calling your new component/i).respond('bob\n')
      .on(/folder/i).respond('\033[B\n')
      .on(/description/i).respond('bla bla\n')
      .on(/keywords/i).respond('\n')
      .on(/support email/).respond('\n')
      .on(/support slack/).respond('\n')
      .on(/status/).respond('\n')
      .on(/brands/).respond('\n')
      .on(/JavaScript/).respond('\n')
      .on(/SCSS/).respond('\n')
      .on(/demos/).respond('\n')
      .on(/ok/).respond('\n')
      .exist('./bob/')
      .exist('./bob/src/js')
      .exist('./bob/src/scss')
      .exist('./bob/test/js')
      .exist('./bob/test/scss')
      .exist('./bob/demos')
      .exist('./bob/.circle')
      .exec('rm -rf bob')
      .end(done)
  });
  
	it('Does not create Javascript files if not requested', (done) => {
    nixt({ colors: false })
      .run('./bin/run init')
      .on(/What are you calling your new component/i).respond('bob\n')
      .on(/folder/i).respond('\033[B\n')
      .on(/description/i).respond('bla bla\n')
      .on(/keywords/i).respond('\n')
      .on(/support email/).respond('\n')
      .on(/support slack/).respond('\n')
      .on(/status/).respond('\n')
      .on(/brands/).respond('\n')
      .on(/JavaScript/).respond('n\n')
      .on(/SCSS/).respond('\n')
      .on(/demos/).respond('\n')
      .on(/ok/).respond('\n')
      .exist('./bob/')
      .exist('./bob/src/scss')
      .exist('./bob/test/scss')
      .exist('./bob/demos')
      .exist('./bob/.circle')
      .notExist('./bob/src/js')
      .notExist('./bob/test/js')
      .notExist('./bob/demo/demo.js')
      .exec('rm -rf bob')
      .end(done)
  });

	it('Does not create SCSS files if not requested', (done) => {
    nixt({ colors: false })
      .run('./bin/run init')
      .on(/What are you calling your new component/i).respond('bob\n')
      .on(/folder/i).respond('\033[B\n')
      .on(/description/i).respond('bla bla\n')
      .on(/keywords/i).respond('\n')
      .on(/support email/).respond('\n')
      .on(/support slack/).respond('\n')
      .on(/status/).respond('\n')
      .on(/brands/).respond('\n')
      .on(/JavaScript/).respond('\n')
      .on(/SCSS/).respond('n\n')
      .on(/demos/).respond('\n')
      .on(/ok/).respond('\n')
      .exist('./bob/')
      .exist('./bob/src/js')
      .exist('./bob/test/js')
      .exist('./bob/demos')
      .exist('./bob/.circle')
      .notExist('./bob/src/scss')
      .notExist('./bob/test/scss')
      .notExist('./bob/demo/demo.scss')
      .exec('rm -rf bob')
      .end(done)
	});

	it('Does not create demo files if not requested', (done) => {
    nixt({ colors: false })
      .run('./bin/run init')
      .on(/What are you calling your new component/i).respond('bob\n')
      .on(/folder/i).respond('\033[B\n')
      .on(/description/i).respond('bla bla\n')
      .on(/keywords/i).respond('\n')
      .on(/support email/).respond('\n')
      .on(/support slack/).respond('\n')
      .on(/status/).respond('\n')
      .on(/brands/).respond('\n')
      .on(/JavaScript/).respond('\n')
      .on(/SCSS/).respond('\n')
      .on(/demos/).respond('n\n')
      .on(/ok/).respond('\n')
      .exist('./bob/')
      .exist('./bob/src/js')
      .exist('./bob/src/scss')
      .exist('./bob/test/js')
      .exist('./bob/test/scss')
      .exist('./bob/.circle')
      .notExist('./bob/demos')
      .exec('rm -rf bob')
      .end(done)
	});
});
